#!/usr/bin/env bash
#############################################################################
# This is a Chisel RTL generator configuration script file. 
# The purpose is to control the compilation and testing
# in parametrized manner from this single file
# Created by Marko Kosunen on 24.03.2015
# Last modification by Marko Kosunen, marko.kosunen@aalto.fi, 11.12.2018 20:27
#############################################################################
##Function to display help with -h argument and to control 
##The configuration from the commnad line
help_f()
{
    printf "CONFIGURE Release 1.0 (04.04.2016)\n"
    printf "configure-configuration script for Chisel RTL generation\n"
    printf "Written by Marko "Pikkis" Kosunen\n\n"

    printf "SYNOPSIS\n"
    printf "  configure [OPTIONS]\n"
    printf "DESCRIPTION\n"
    printf "  Produces all configurations and Makefile for the Chisel RTL generation\n\n"

    printf "OPTIONS\n"
    printf "  -h\n"
    printf "      Show this help.\n"
}

while getopts h opt
do
  case "$opt" in
    h) help_f; exit 0;;
    \?) help_f;;
  esac
done


#$FIRRTL #Sets up THESDKHOME from gloabl setup file
#. ../../TheSDK.config
ROOTPATH=`pwd`
VERILOGPATH=${ROOTPATH}/verilog
SCALAPATH=${ROOTPATH}/src/main/scala
FIRRTL_JAR="$ROOTPATH/rocket-chip/firrtl/utils/bin/firrtl.jar"

VPATHDIRS=`find ${SCALAPATH}/* -type d -exec basename '{}' ';'`
MODULES="f2_symbol_sync"

############################# MAKEFILE   ####################################
CURRENTFILE="${ROOTPATH}/Makefile"
echo "Creating ${CURRENTFILE} for modules:"
for i in ${MODULES}; do
    echo $i
done
cat <<EOF > ${CURRENTFILE}
#Directories
VERILOGPATH= ${VERILOGPATH}
SCALAPATH= ${SCALAPATH}
#DEPDIR :=.depdir
#\$(shell mkdir -p \$(DEPDIR) >/dev/null)
\$(shell mkdir -p \$(VERILOGPATH) >/dev/null)
MODULES= ${MODULES}

TARGETS = \$(foreach name,\$(MODULES), \$(VERILOGPATH)/\$(name).v)
TEST_TARGETS = \$(foreach name,\$(MODULES), test_\$(name))

#Commands
SBT=sbt -J-Xmx16G -J-Xss8M

TOUCH=touch -r
`for i in ${VPATHDIRS}; do
    echo vpath %.scala \\$\(SCALAPATH\)/$i
done`
.PHONY: all help clean \$(MODULES)


all: \$(TARGETS) \$(TEST_TARGETS)


#Recipes for individual modules
`for i in ${MODULES}; do
    printf "%s: \\$(VERILOGPATH)/%s.v\n" $i $i
done`

#Test recipes for in
`for i in ${MODULES}; do
	printf ".PHONY: test_%s\n" $i
	printf "test_%s:\n" $i
	printf "\t\\$(SBT) 'runMain %s.unit_test'\n"  $i
done`


#Template for conditional makes
#Figure out the naming conventions later. Package is lowercase, class equals main method
#Does not track dependencies from scala source
\$(VERILOGPATH)/%.v : %.scala  
	\$(eval package:=\$(basename \$(notdir \$@)))
	\$(eval class:=\$(basename \$(notdir \$@)))
	\$(eval testbenchfile:=\$(dir \$<)tb_\$(notdir \$<))
	\$(SBT) 'runMain \$(package).\$(class) -td \$(VERILOGPATH)' 
	@#Test if testbech generator exists and compile it
	@if [ -f \$(testbenchfile) ]; then \\
		\$(SBT) 'runMain \$(package).tb_\$(class) -td \$(VERILOGPATH)'; \\
	fi
clean:
	rm -f \$(VERILOGPATH)/*.v
	rm -f \$(VERILOGPATH)/*.anno
	rm -f \$(VERILOGPATH)/*.fir
	rm -rf \$(VERILOGPATH)
	#rm -rf \$(DEPDIR)

MMOD ?=
memmap:
	cp \$(VERILOGPATH)/\$(MMOD).v  \$(VERILOGPATH)/\$(MMOD)_unmapped.orig.v
	\$(SBT) 'runMain \$(MMOD).\$(MMOD) -td \$(VERILOGPATH) --infer-rw \$(MMOD) --repl-seq-mem -c:\$(MMOD):-o:\$(VERILOGPATH)/\$(MMOD).conf'

#Generate cleanup recipes for individual modules
`for i in ${MODULES}; do
	printf ".PHONY: clean_%s\n" $i
	printf "clean_%s:\n" $i 
	printf "\trm -f \\$(VERILOGPATH)/%s.v" $i
	printf "\trm -f \\$(VERILOGPATH)/%s.anno" $i
	printf "\trm -f \\$(VERILOGPATH)/%s.fir" $i
	printf "\trm -f \\$(VERILOGPATH)/$%s_memmapped.conf" $i
	printf "\trm -f \\$(VERILOGPATH)/$%s_memmapped.v" $i
done`

help:
	@echo "configured modules are:";
	@for i in \$(MODULES) ; do \\
	   echo \$\$i; \\
	done
EOF
##################Hereafter some files you should not need to modify ################################

